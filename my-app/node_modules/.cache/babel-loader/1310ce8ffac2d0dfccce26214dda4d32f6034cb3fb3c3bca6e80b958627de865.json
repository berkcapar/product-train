{"ast":null,"code":"var _jsxFileName = \"/Users/berkcapar/Desktop/Berk/Code/product.content/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Make sure to create an App.css file for styles\nimport Navbar from './Components/Navbar/Navbar';\nimport Card from './Components/Card/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst blogAuthors = {\n  \"lennysnewsletter.com\": \"Lenny's Newsletter\",\n  \"dpereira.substack.com\": \"David Pereria\",\n  \"producttalk.org\": \"Product Talk\"\n};\nfunction App() {\n  _s();\n  const [articles, setArticles] = useState([]);\n  const getAuthorName = url => {\n    for (const domain in blogAuthors) {\n      if (url.includes(domain)) {\n        return blogAuthors[domain];\n      }\n    }\n    return \"Unknown Author\"; // Default case for unmatched URLs\n  };\n\n  // Helper function to parse and format date\n  const parseAndFormatDate = dateStr => {\n    let parsedDate;\n    if (dateStr.includes(',')) {\n      // Format: \"December 13, 2023\"\n      parsedDate = new Date(dateStr);\n    } else {\n      // Format: \"Dec 13\"\n      const currentYear = new Date().getFullYear();\n      parsedDate = new Date(`${dateStr} ${currentYear}`);\n    }\n    // Format date to 'MMM DD' format (e.g., 'Dec 13')\n    return parsedDate.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  useEffect(() => {\n    fetch('http://localhost:4000/scrape').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      const sortedData = data.map(article => ({\n        ...article,\n        formatted_date: parseAndFormatDate(article.published_date)\n      })).sort((a, b) => {\n        const dateA = new Date(a.published_date);\n        const dateB = new Date(b.published_date);\n        return dateB - dateA; // Sort in descending order\n      });\n      console.log(sortedData); // Log to see the sorted data\n      setArticles(sortedData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: articles.map(article => /*#__PURE__*/_jsxDEV(Card, {\n        title: article.title,\n        imageUrl: article.image,\n        date: article.formatted_date // Use formatted date\n        ,\n        url: article.url,\n        author: getAuthorName(article.url)\n      }, article.url, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"XsOpLvUbTkfx79dw07TVNsBviNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","blogAuthors","App","_s","articles","setArticles","getAuthorName","url","domain","includes","parseAndFormatDate","dateStr","parsedDate","Date","currentYear","getFullYear","toLocaleDateString","month","day","fetch","then","response","ok","Error","json","data","sortedData","map","article","formatted_date","published_date","sort","a","b","dateA","dateB","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","imageUrl","image","date","author","_c","$RefreshReg$"],"sources":["/Users/berkcapar/Desktop/Berk/Code/product.content/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css'; // Make sure to create an App.css file for styles\nimport Navbar from './Components/Navbar/Navbar'\nimport Card from './Components/Card/Card'\n\n\nconst blogAuthors = {\n  \"lennysnewsletter.com\": \"Lenny's Newsletter\",\n  \"dpereira.substack.com\": \"David Pereria\",\n  \"producttalk.org\": \"Product Talk\"\n};\n\n\nfunction App() {\n  const [articles, setArticles] = useState([]);\n\n  const getAuthorName = (url) => {\n    for (const domain in blogAuthors) {\n      if (url.includes(domain)) {\n        return blogAuthors[domain];\n      }\n    }\n    return \"Unknown Author\"; // Default case for unmatched URLs\n  };\n  \n\n  // Helper function to parse and format date\n  const parseAndFormatDate = (dateStr) => {\n    let parsedDate;\n    if (dateStr.includes(',')) {\n      // Format: \"December 13, 2023\"\n      parsedDate = new Date(dateStr);\n    } else {\n      // Format: \"Dec 13\"\n      const currentYear = new Date().getFullYear();\n      parsedDate = new Date(`${dateStr} ${currentYear}`);\n    }\n    // Format date to 'MMM DD' format (e.g., 'Dec 13')\n    return parsedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:4000/scrape')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const sortedData = data.map(article => ({\n          ...article,\n          formatted_date: parseAndFormatDate(article.published_date)\n        })).sort((a, b) => {\n          const dateA = new Date(a.published_date);\n          const dateB = new Date(b.published_date);\n          return dateB - dateA; // Sort in descending order\n        });\n\n        console.log(sortedData); // Log to see the sorted data\n        setArticles(sortedData);\n      })\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n  \n  return (\n    <>\n      <Navbar />\n      <div className=\"cards-container\">\n        {articles.map(article => (\n          <Card\n            key={article.url}\n            title={article.title}\n            imageUrl={article.image}\n            date={article.formatted_date} // Use formatted date\n            url={article.url}\n            author={getAuthorName(article.url)}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}