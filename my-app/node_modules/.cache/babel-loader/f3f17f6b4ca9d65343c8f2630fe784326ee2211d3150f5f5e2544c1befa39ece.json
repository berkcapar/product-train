{"ast":null,"code":"var _jsxFileName = \"/Users/berkcapar/Desktop/Berk/Code/product.content/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Make sure to create an App.css file for styles\nimport Navbar from './Components/Navbar/Navbar';\nimport Card from './Components/Card/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst blogAuthors = {\n  \"lennysnewsletter.com\": \"Lenny's Newsletter\",\n  \"dpereira.substack.com\": \"David Pereria\",\n  \"producttalk.org\": \"Product Talk\"\n};\nfunction App() {\n  _s();\n  const [articles, setArticles] = useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const getAuthorName = url => {\n    for (const domain in blogAuthors) {\n      if (url.includes(domain)) {\n        return blogAuthors[domain];\n      }\n    }\n    return \"Unknown Author\"; // Default case for unmatched URLs\n  };\n\n  // Helper function to parse and format date\n  const parseAndFormatDate = dateStr => {\n    let parsedDate;\n    if (dateStr.includes(',')) {\n      // Format: \"December 13, 2023\"\n      parsedDate = new Date(dateStr);\n    } else {\n      // Format: \"Dec 13\"\n      const currentYear = new Date().getFullYear();\n      parsedDate = new Date(`${dateStr} ${currentYear}`);\n    }\n    // Format date to 'MMM DD' format (e.g., 'Dec 13')\n    return parsedDate.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  useEffect(() => {\n    fetch('http://localhost:4000/scrape').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      // Ensure all dates are in a consistent Date object format\n      const processedData = data.map(article => ({\n        ...article,\n        dateObject: new Date(parseAndFormatDate(article.published_date))\n      }));\n\n      // Sort the articles by the date objects\n      const sortedData = processedData.sort((a, b) => b.dateObject - a.dateObject);\n\n      // Now that the data is sorted, format the dates for display\n      const finalData = sortedData.map(article => ({\n        ...article,\n        formatted_date: article.dateObject.toLocaleDateString('en-US', {\n          month: 'short',\n          day: 'numeric'\n        })\n      }));\n      setArticles(finalData);\n      setIsLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) // Show loading message when data is being fetched\n      : articles.map(article => /*#__PURE__*/_jsxDEV(Card, {\n        title: article.title,\n        imageUrl: article.image,\n        date: article.formatted_date,\n        url: article.url,\n        author: getAuthorName(article.url)\n      }, article.url, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"iJ6mDbRVdCaXzOy3z3OAasv2iiI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","blogAuthors","App","_s","articles","setArticles","isLoading","setIsLoading","getAuthorName","url","domain","includes","parseAndFormatDate","dateStr","parsedDate","Date","currentYear","getFullYear","toLocaleDateString","month","day","fetch","then","response","ok","Error","json","data","processedData","map","article","dateObject","published_date","sortedData","sort","a","b","finalData","formatted_date","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","imageUrl","image","date","author","_c","$RefreshReg$"],"sources":["/Users/berkcapar/Desktop/Berk/Code/product.content/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css'; // Make sure to create an App.css file for styles\nimport Navbar from './Components/Navbar/Navbar'\nimport Card from './Components/Card/Card'\n\n\nconst blogAuthors = {\n  \"lennysnewsletter.com\": \"Lenny's Newsletter\",\n  \"dpereira.substack.com\": \"David Pereria\",\n  \"producttalk.org\": \"Product Talk\"\n};\n\n\nfunction App() {\n  const [articles, setArticles] = useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n\n  const getAuthorName = (url) => {\n    for (const domain in blogAuthors) {\n      if (url.includes(domain)) {\n        return blogAuthors[domain];\n      }\n    }\n    return \"Unknown Author\"; // Default case for unmatched URLs\n  };\n  \n\n  // Helper function to parse and format date\n  const parseAndFormatDate = (dateStr) => {\n    let parsedDate;\n    if (dateStr.includes(',')) {\n      // Format: \"December 13, 2023\"\n      parsedDate = new Date(dateStr);\n    } else {\n      // Format: \"Dec 13\"\n      const currentYear = new Date().getFullYear();\n      parsedDate = new Date(`${dateStr} ${currentYear}`);\n    }\n    // Format date to 'MMM DD' format (e.g., 'Dec 13')\n    return parsedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:4000/scrape')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        // Ensure all dates are in a consistent Date object format\n        const processedData = data.map(article => ({\n          ...article,\n          dateObject: new Date(parseAndFormatDate(article.published_date))\n        }));\n  \n        // Sort the articles by the date objects\n        const sortedData = processedData.sort((a, b) => b.dateObject - a.dateObject);\n  \n        // Now that the data is sorted, format the dates for display\n        const finalData = sortedData.map(article => ({\n          ...article,\n          formatted_date: article.dateObject.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n        }));\n  \n        setArticles(finalData);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setIsLoading(false);\n      });\n  }, []);\n  \n  return (\n    <>\n      <Navbar />\n      <div className=\"cards-container\">\n        {isLoading ? (\n          <div>Loading...</div> // Show loading message when data is being fetched\n        ) : (\n          articles.map(article => (\n            <Card\n              key={article.url}\n              title={article.title}\n              imageUrl={article.image}\n              date={article.formatted_date}\n              url={article.url}\n              author={getAuthorName(article.url)}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}